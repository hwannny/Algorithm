<문제>
두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

<제한조건>
a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
a와 b의 대소관계는 정해져있지 않습니다.

<입출력 예>
a	b	return
3	5	12
3	3	3
5	3	12

출처: https://programmers.co.kr/learn/courses/30/lessons/12912


<의사코드>
input: int a,b
output: long answer
1. min = Min(a,b)
2. max = Max(a,b)
3. answer =  (max + min) * (max - min + 1 ) / 2
4. return answer

<C++코드>
#include <string>
#include <vector>
#include <cmath>
using namespace std;
long long solution(int a, int b) {
    long long answer = 0;
    long minNum = min(a,b);
    long maxNum= max(a,b);  
    answer = (maxNum + minNum) * (maxNum-minNum+1) /2;
    return answer;
}


<노트>
간단히 생각하면
for i문을 돌려서 a부터 b까지 totalSum을 구하는 O(n)의 시간복잡도 알고리즘을 생각할수 있다.
하지만 이럴경우는 n의 수가 커질수록 성능이 떨어진다. 물론 O(n) 자체가 나쁜 성능은 아니지만
더 나은 방법이 있다.

그건 가우스의 공식을 이용하는 방법이다.
1~100 까지의 합을 가우스는 n * (n+1) / 2 로 O(1)시간안에 구했다
따라서 이 공식을 이용해서

1~b까지의 합에서 1~a까지의 합을 빼면 a~b까지의 합이 나온다.
b * (b+1) / 2  - a * (a+1) / 2 를 정리하면 최종적으로
(b + a) * (b - a + 1) / 2가 나온다.

단, 프로그램상에서 a,b가 int형인채로 나누기를 쓰면 소수점의 값이 정확하지 않다.
따라서, 자료형을 long으로 바꿔주고 진행한다.

